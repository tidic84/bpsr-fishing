"""
Bot d'automatisation de p√™che
Automatise le processus de p√™che dans le jeu
"""

import pyautogui
import cv2
import numpy as np
from PIL import Image
import time
import os
import sys
from datetime import datetime
import keyboard

class FishingBot:
    def __init__(self, confidence=0.8):
        """
        Initialise le bot de p√™che
        
        Args:
            confidence: Niveau de confiance pour la d√©tection d'images (0.0 √† 1.0)
        """
        self.confidence = confidence
        self.images_dir = "images_reference"
        self.running = False
        self.stats = {
            "fish_caught": 0,
            "fishing_attempts": 0,
            "start_time": None,
            "errors": 0
        }
        
        # Charger les images de r√©f√©rence
        self.templates = {}
        self.load_templates()
        
        # Charger les positions si elles existent
        self.positions = {}
        self.load_positions()
        
        # Configuration
        self.wait_after_click = 0.5  # D√©lai apr√®s chaque clic (secondes)
        self.exclamation_timeout = 30  # Temps max d'attente pour le point d'exclamation
        self.continue_button_timeout = 10  # Temps max d'attente pour le bouton Continue
        self.qte_wait_time = 8  # Temps d'attente pour le QTE avant de v√©rifier le bouton Continue
        
        # D√©sactiver le fail-safe de pyautogui si souhait√© (d√©commenter avec pr√©caution)
        # pyautogui.FAILSAFE = False
        
        print("\n" + "="*60)
        print(" BOT DE P√äCHE - Initialis√©")
        print("="*60)
        print(f"Confiance de d√©tection: {confidence*100}%")
        print(f"Images charg√©es: {len(self.templates)}")
        print(f"Positions charg√©es: {len(self.positions)}")
        print("\nTouche d'arr√™t d'urgence: ESC")
        print("="*60 + "\n")
    
    def load_templates(self):
        """Charge les images de r√©f√©rence pour la d√©tection"""
        template_files = {
            "exclamation": "exclamation_point.png",
            "continue": "button_continue.png",
            "exit": "button_exit.png"
        }
        
        for key, filename in template_files.items():
            filepath = os.path.join(self.images_dir, filename)
            if os.path.exists(filepath):
                img = cv2.imread(filepath)
                if img is not None:
                    self.templates[key] = img
                    print(f"‚úì Image charg√©e: {filename}")
                else:
                    print(f"‚ö† Impossible de charger: {filename}")
            else:
                print(f"‚ö† Fichier non trouv√©: {filename}")
        
        if not self.templates:
            print("\n‚ùå ERREUR: Aucune image de r√©f√©rence trouv√©e!")
            print("   Veuillez ex√©cuter calibration.py d'abord.\n")
            sys.exit(1)
    
    def load_positions(self):
        """Charge les positions de clic depuis le fichier de configuration"""
        config_file = os.path.join(self.images_dir, "positions.txt")
        if os.path.exists(config_file):
            with open(config_file, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if "=" in line:
                        name, coords = line.split("=")
                        x, y = coords.split(",")
                        self.positions[name] = (int(x), int(y))
                        print(f"‚úì Position charg√©e: {name} = ({x}, {y})")
    
    def find_on_screen(self, template_key, region=None, timeout=5):
        """
        Cherche une image template sur l'√©cran
        
        Args:
            template_key: Cl√© du template √† chercher
            region: R√©gion de recherche (x, y, width, height) ou None pour tout l'√©cran
            timeout: Temps maximum de recherche en secondes
            
        Returns:
            Tuple (x, y) du centre de l'image trouv√©e, ou None si non trouv√©
        """
        if template_key not in self.templates:
            print(f"‚ö† Template '{template_key}' non disponible")
            return None
        
        template = self.templates[template_key]
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            # V√©rifier si l'utilisateur veut arr√™ter
            if keyboard.is_pressed('esc'):
                print("\n‚ö† Arr√™t demand√© par l'utilisateur (ESC)")
                self.running = False
                return None
            
            # Capture d'√©cran
            screenshot = pyautogui.screenshot(region=region)
            screenshot_np = np.array(screenshot)
            screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
            
            # Matching de template
            result = cv2.matchTemplate(screenshot_cv, template, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            
            if max_val >= self.confidence:
                # Calculer le centre de l'image trouv√©e
                h, w = template.shape[:2]
                center_x = max_loc[0] + w // 2
                center_y = max_loc[1] + h // 2
                
                # Ajuster pour la r√©gion si n√©cessaire
                if region:
                    center_x += region[0]
                    center_y += region[1]
                
                return (center_x, center_y)
            
            time.sleep(0.1)  # Petite pause entre les v√©rifications
        
        return None
    
    def safe_click(self, x=None, y=None, position_name=None):
        """
        Effectue un clic en toute s√©curit√©
        
        Args:
            x, y: Coordonn√©es du clic, ou
            position_name: Nom d'une position pr√©-enregistr√©e
        """
        if position_name and position_name in self.positions:
            x, y = self.positions[position_name]
        
        if x is None or y is None:
            print("‚ö† Position de clic invalide")
            return False
        
        try:
            print(f"  ‚Üí D√©placement de la souris vers ({x}, {y})...")
            pyautogui.moveTo(x, y, duration=0.2)
            time.sleep(0.1)
            
            print(f"  ‚Üí Clic gauche √† la position ({x}, {y})...")
            pyautogui.click(x, y, button='left')
            
            print(f"  ‚úì Clic effectu√© avec succ√®s!")
            time.sleep(self.wait_after_click)
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du clic: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def fishing_cycle(self):
        """Ex√©cute un cycle complet de p√™che"""
        try:
            # √âtape 1: Cliquer pour commencer la p√™che
            print("\n[√âtape 1] D√©marrage de la p√™che...")
            self.stats["fishing_attempts"] += 1
            
            if "fishing_start" in self.positions:
                click_success = self.safe_click(position_name="fishing_start")
            else:
                # Clic au centre de l'√©cran si pas de position d√©finie
                screen_width, screen_height = pyautogui.size()
                print(f"  ‚Ñπ Aucune position enregistr√©e, clic au centre: ({screen_width // 2}, {screen_height // 2})")
                click_success = self.safe_click(screen_width // 2, screen_height // 2)
            
            if not click_success:
                print("  ‚ö† Le clic de d√©marrage a √©chou√©, nouvelle tentative...")
                time.sleep(1)
                return False
            
            # Petit d√©lai suppl√©mentaire apr√®s le clic initial
            time.sleep(0.5)
            
            # √âtape 2: Attendre et d√©tecter le point d'exclamation
            print("[√âtape 2] Attente du point d'exclamation...")
            exclamation_pos = self.find_on_screen("exclamation", timeout=self.exclamation_timeout)
            
            if exclamation_pos is None:
                print("‚ö† Point d'exclamation non d√©tect√© - Timeout")
                self.stats["errors"] += 1
                time.sleep(2)
                return False
            
            print(f"‚úì Point d'exclamation d√©tect√© √† {exclamation_pos}")
            self.safe_click(*exclamation_pos)
            
            # √âtape 3: Attendre le QTE ou le succ√®s direct
            print("[√âtape 3] Attente du r√©sultat (QTE ou succ√®s direct)...")
            time.sleep(self.qte_wait_time)
            
            # √âtape 4: Chercher le bouton Continue
            print("[√âtape 4] Recherche du bouton Continue...")
            continue_pos = self.find_on_screen("continue", timeout=self.continue_button_timeout)
            
            if continue_pos is None:
                print("‚ö† Bouton Continue non d√©tect√© - Nouvelle tentative...")
                # Peut-√™tre encore dans le QTE, attendre un peu plus
                time.sleep(3)
                continue_pos = self.find_on_screen("continue", timeout=5)
            
            if continue_pos:
                print(f"‚úì Bouton Continue d√©tect√© √† {continue_pos}")
                self.safe_click(*continue_pos)
                self.stats["fish_caught"] += 1
                print(f"üé£ Poisson p√™ch√©! Total: {self.stats['fish_caught']}")
                time.sleep(1)
                return True
            else:
                print("‚ö† Impossible de trouver le bouton Continue")
                self.stats["errors"] += 1
                # Tenter un clic ESC ou retour
                pyautogui.press('esc')
                time.sleep(1)
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur dans le cycle de p√™che: {e}")
            self.stats["errors"] += 1
            return False
    
    def print_stats(self):
        """Affiche les statistiques"""
        if self.stats["start_time"]:
            elapsed = time.time() - self.stats["start_time"]
            elapsed_min = elapsed / 60
            fish_per_hour = (self.stats["fish_caught"] / elapsed * 3600) if elapsed > 0 else 0
            
            print("\n" + "="*60)
            print(" STATISTIQUES")
            print("="*60)
            print(f"Poissons p√™ch√©s: {self.stats['fish_caught']}")
            print(f"Tentatives totales: {self.stats['fishing_attempts']}")
            print(f"Erreurs: {self.stats['errors']}")
            print(f"Temps √©coul√©: {elapsed_min:.1f} minutes")
            print(f"Taux: {fish_per_hour:.1f} poissons/heure")
            print("="*60 + "\n")
    
    def run(self, max_cycles=None):
        """
        Lance le bot
        
        Args:
            max_cycles: Nombre maximum de cycles (None = infini)
        """
        print("\nüé£ D√©marrage du bot de p√™che...")
        print("‚ö† Assurez-vous que le jeu est au premier plan!")
        print("\nLe bot d√©marrera dans 5 secondes...")
        print("(Appuyez sur ESC √† tout moment pour arr√™ter)\n")
        
        for i in range(5, 0, -1):
            print(f"{i}...")
            time.sleep(1)
        
        self.running = True
        self.stats["start_time"] = time.time()
        cycle_count = 0
        
        print("\nüöÄ Bot d√©marr√©!\n")
        
        try:
            while self.running:
                if max_cycles and cycle_count >= max_cycles:
                    print(f"\n‚úì Nombre maximum de cycles atteint ({max_cycles})")
                    break
                
                cycle_count += 1
                print(f"\n{'='*60}")
                print(f" CYCLE #{cycle_count}")
                print(f"{'='*60}")
                
                self.fishing_cycle()
                
                # Afficher les stats tous les 10 cycles
                if cycle_count % 10 == 0:
                    self.print_stats()
                
                # Petite pause entre les cycles
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\n\n‚ö† Interruption par l'utilisateur (Ctrl+C)")
        finally:
            self.running = False
            self.print_stats()
            print("\n‚úì Bot arr√™t√© proprement")

def main():
    """Fonction principale"""
    print("\n" + "="*60)
    print(" BOT D'AUTOMATISATION DE P√äCHE")
    print("="*60)
    
    # V√©rifier que les images de r√©f√©rence existent
    if not os.path.exists("images_reference"):
        print("\n‚ùå ERREUR: Dossier 'images_reference' non trouv√©!")
        print("   Veuillez ex√©cuter calibration.py d'abord.\n")
        return
    
    # Configuration
    print("\nConfiguration:")
    print("1. Mode normal (confiance 80%)")
    print("2. Mode pr√©cis (confiance 90%)")
    print("3. Mode souple (confiance 70%)")
    
    choice = input("\nChoisissez un mode (1-3) [d√©faut: 1]: ").strip()
    
    confidence_map = {
        "1": 0.8,
        "2": 0.9,
        "3": 0.7,
        "": 0.8
    }
    confidence = confidence_map.get(choice, 0.8)
    
    # Nombre de cycles
    print("\nNombre de cycles de p√™che:")
    max_cycles_input = input("(Appuyez sur ENTR√âE pour illimit√©): ").strip()
    max_cycles = int(max_cycles_input) if max_cycles_input.isdigit() else None
    
    # Cr√©er et lancer le bot
    bot = FishingBot(confidence=confidence)
    bot.run(max_cycles=max_cycles)

if __name__ == "__main__":
    main()

