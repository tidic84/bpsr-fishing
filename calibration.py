"""
Script de calibration pour l'automatisation de p√™che
Permet de capturer les images de r√©f√©rence n√©cessaires pour la d√©tection
"""

import pyautogui
import cv2
import numpy as np
from PIL import Image
import os
import time

class CalibrationTool:
    def __init__(self):
        self.images_dir = "images_reference"
        if not os.path.exists(self.images_dir):
            os.makedirs(self.images_dir)
    
    def capture_region(self, name, description):
        """Capture une r√©gion de l'√©cran s√©lectionn√©e par l'utilisateur"""
        print(f"\n{'='*60}")
        print(f"CAPTURE: {description}")
        print(f"{'='*60}")
        print("\nInstructions:")
        print("1. Positionnez votre jeu de mani√®re √† ce que l'√©l√©ment soit visible")
        print("2. Appuyez sur ENTR√âE pour commencer la capture")
        print("3. Vous aurez 3 secondes pour positionner votre souris")
        print("4. Cliquez et faites glisser pour s√©lectionner la zone")
        
        input("\nAppuyez sur ENTR√âE pour commencer...")
        print("Pr√©paration... Positionnez-vous sur le jeu!")
        
        for i in range(3, 0, -1):
            print(f"{i}...")
            time.sleep(1)
        
        print("\n‚úì Prenez une capture d'√©cran maintenant!")
        print("  Utilisez l'outil de capture Windows (Win + Shift + S)")
        print("  OU appuyez sur F12 apr√®s avoir s√©lectionn√© manuellement la zone")
        print("\nAppuyez sur ENTR√âE une fois la capture faite...")
        input()
        
        # Alternative: capture de coordonn√©es manuelles
        print("\nVoulez-vous saisir les coordonn√©es manuellement? (o/n)")
        manual = input().lower()
        
        if manual == 'o':
            print("\nD√©placez votre souris en haut √† gauche de la zone et appuyez sur ENTR√âE")
            input()
            x1, y1 = pyautogui.position()
            print(f"Position enregistr√©e: ({x1}, {y1})")
            
            print("\nD√©placez votre souris en bas √† droite de la zone et appuyez sur ENTR√âE")
            input()
            x2, y2 = pyautogui.position()
            print(f"Position enregistr√©e: ({x2}, {y2})")
            
            # Capture de la r√©gion
            screenshot = pyautogui.screenshot(region=(x1, y1, x2-x1, y2-y1))
            filepath = os.path.join(self.images_dir, f"{name}.png")
            screenshot.save(filepath)
            print(f"\n‚úì Image sauvegard√©e: {filepath}")
            
            # Afficher un aper√ßu
            img = cv2.imread(filepath)
            if img is not None:
                cv2.imshow(f"Aper√ßu - {description}", img)
                print("\nAppuyez sur une touche dans la fen√™tre d'aper√ßu pour continuer...")
                cv2.waitKey(0)
                cv2.destroyAllWindows()
            
            return True
        else:
            print(f"\n‚ö† Veuillez sauvegarder manuellement l'image comme: {self.images_dir}/{name}.png")
            return False
    
    def capture_click_position(self, name, description):
        """Capture une position de clic"""
        print(f"\n{'='*60}")
        print(f"POSITION DE CLIC: {description}")
        print(f"{'='*60}")
        print("\nInstructions:")
        print("1. Positionnez votre jeu")
        print("2. Appuyez sur ENTR√âE pour commencer")
        print("3. Vous aurez 3 secondes")
        print("4. Placez votre souris √† l'endroit exact o√π cliquer")
        
        input("\nAppuyez sur ENTR√âE pour commencer...")
        
        for i in range(3, 0, -1):
            print(f"{i}...")
            time.sleep(1)
        
        x, y = pyautogui.position()
        print(f"\n‚úì Position captur√©e: ({x}, {y})")
        
        # Sauvegarder dans un fichier de configuration
        config_file = os.path.join(self.images_dir, "positions.txt")
        with open(config_file, "a", encoding="utf-8") as f:
            f.write(f"{name}={x},{y}\n")
        
        print(f"‚úì Position sauvegard√©e dans {config_file}")
        return x, y
    
    def run_calibration(self):
        """Lance le processus de calibration complet"""
        print("\n" + "="*60)
        print(" OUTIL DE CALIBRATION - AUTOMATISATION DE P√äCHE")
        print("="*60)
        
        print("\nCet outil va vous aider √† capturer les √©l√©ments n√©cessaires:")
        print("1. Le point d'exclamation (!) qui appara√Æt")
        print("2. Le bouton 'Continue'")
        print("3. (Optionnel) La position de clic initiale")
        
        input("\nAppuyez sur ENTR√âE pour commencer la calibration...")
        
        # Capture 1: Point d'exclamation
        self.capture_region(
            "exclamation_point",
            "Point d'exclamation (!)"
        )
        
        # Capture 2: Bouton Continue
        self.capture_region(
            "button_continue",
            "Bouton 'Continue'"
        )
        
        # Capture 3: Bouton Exit (optionnel)
        print("\nVoulez-vous aussi capturer le bouton 'Exit'? (o/n)")
        if input().lower() == 'o':
            self.capture_region(
                "button_exit",
                "Bouton 'Exit'"
            )
        
        # Capture 4: Indicateur canne pr√™te (optionnel mais recommand√©)
        print("\nüí° OPTIMISATION: Voulez-vous capturer l'indicateur 'canne pr√™te'?")
        print("   Cela permet au bot de relancer la p√™che plus rapidement! (o/n)")
        if input().lower() == 'o':
            print("\n   Capturez l'√©l√©ment qui indique que vous pouvez p√™cher √† nouveau")
            print("   (ic√¥ne, texte, barre, etc.)")
            self.capture_region(
                "fishing_ready",
                "Indicateur canne pr√™te"
            )
        
        # Position de clic pour commencer la p√™che
        print("\nVoulez-vous enregistrer une position de clic pour commencer la p√™che? (o/n)")
        if input().lower() == 'o':
            self.capture_click_position(
                "fishing_start",
                "Position pour commencer la p√™che"
            )
        
        print("\n" + "="*60)
        print(" ‚úì CALIBRATION TERMIN√âE!")
        print("="*60)
        print(f"\nVos images sont sauvegard√©es dans: {self.images_dir}/")
        print("\nVous pouvez maintenant utiliser le script principal: fishing_bot.py")
        print("\nConseils:")
        print("- V√©rifiez que les images captur√©es sont claires")
        print("- √âvitez de capturer trop de zone autour des √©l√©ments")
        print("- Gardez la m√™me r√©solution de jeu lors de l'utilisation du bot")

if __name__ == "__main__":
    calibrator = CalibrationTool()
    try:
        calibrator.run_calibration()
    except KeyboardInterrupt:
        print("\n\n‚ö† Calibration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

